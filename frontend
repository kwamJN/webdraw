from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.slider import Slider
from kivy.uix.togglebutton import ToggleButton
from kivy.uix.image import Image
from kivy.uix.label import Label
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.colorpicker import ColorPicker
from kivy.uix.widget import Widget
from kivy.uix.popup import Popup
from kivy.graphics import Color, Line
from kivy.core.window import Window
from kivy.uix.scrollview import ScrollView
from kivy.uix.gridlayout import GridLayout
from kivy.properties import BooleanProperty, NumericProperty
import os

# Make window size more "phone-like" for testing
Window.size = (360, 640)

class DrawCanvas(Widget):
    def on_touch_down(self, touch):
        if not self.collide_point(*touch.pos): return
        with self.canvas:
            Color(*self.parent.parent.brush_color)
            touch.ud["line"] = Line(points=(touch.x, touch.y), width=self.parent.parent.brush_size)

    def on_touch_move(self, touch):
        if "line" in touch.ud:
            touch.ud["line"].points += [touch.x, touch.y]

class LayerItem(BoxLayout):
    visible = BooleanProperty(True)
    opacity = NumericProperty(1.0)

    def __init__(self, name, **kwargs):
        super().__init__(orientation='horizontal', size_hint_y=None, height=40, **kwargs)
        self.name = name
        self.label = Label(text=name, size_hint_x=0.5)
        self.toggle = ToggleButton(text='üëÅÔ∏è', state='down', size_hint_x=0.2)
        self.slider = Slider(min=0, max=1, value=1, size_hint_x=0.3)

        self.toggle.bind(on_press=self.toggle_visibility)
        self.slider.bind(value=self.change_opacity)

        self.add_widget(self.label)
        self.add_widget(self.toggle)
        self.add_widget(self.slider)

    def toggle_visibility(self, instance):
        self.visible = (instance.state == 'down')
        print(f"[Layer] {self.name} visibility: {self.visible}")

    def change_opacity(self, instance, value):
        self.opacity = value
        print(f"[Layer] {self.name} opacity: {value}")

class WebtoonApp(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)
        self.brush_color = (0, 0, 0, 1)
        self.brush_size = 2

        # Top toolbar
        toolbar = BoxLayout(size_hint_y=0.1)
        toolbar.add_widget(Button(text="‚úíÔ∏è AI Inking", on_press=self.ai_ink))
        toolbar.add_widget(Button(text="üíæ Save", on_press=self.save_project))
        toolbar.add_widget(Button(text="‚òÅÔ∏è Cloud", on_press=self.cloud_sync))
        self.add_widget(toolbar)

        # Drawing canvas
        self.canvas_area = DrawCanvas()
        self.add_widget(self.canvas_area)

        # Layer panel (bottom)
        bottom = BoxLayout(orientation='horizontal', size_hint_y=0.3)

        # Layers section
        self.layer_list = GridLayout(cols=1, size_hint_y=None)
        self.layer_list.bind(minimum_height=self.layer_list.setter('height'))

        for i in range(3):
            self.add_layer(f"Layer {i+1}")

        scroll = ScrollView(size_hint=(0.7, 1))
        scroll.add_widget(self.layer_list)

        # Tools section
        tool_buttons = BoxLayout(orientation='vertical', size_hint_x=0.3)
        tool_buttons.add_widget(Button(text="üé® Color", on_press=self.choose_color))
        tool_buttons.add_widget(Button(text="‚ûï Add Layer", on_press=lambda _: self.add_layer(f"Layer {len(self.layer_list.children)+1}")))

        bottom.add_widget(scroll)
        bottom.add_widget(tool_buttons)

        self.add_widget(bottom)

    def add_layer(self, name):
        layer = LayerItem(name)
        self.layer_list.add_widget(layer)
        print(f"[Layer] Added {name}")

    def choose_color(self, instance):
        content = BoxLayout(orientation='vertical')
        picker = ColorPicker()
        content.add_widget(picker)
        content.add_widget(Button(text="Choose", size_hint_y=None, height=50,
                                  on_press=lambda x: self.set_color_and_dismiss(picker.color, popup)))

        popup = Popup(title='Pick a Color', content=content, size_hint=(0.9, 0.9))
        popup.open()

    def set_color_and_dismiss(self, color, popup):
        self.brush_color = color
        popup.dismiss()

    def ai_ink(self, instance):
        print("[AI] Inking with OpenCV (stubbed)")

    def save_project(self, instance):
        print("[Save] Saving project (stubbed)")

    def cloud_sync(self, instance):
        print("[Cloud] Uploading to cloud (stubbed)")

class WebtoonAppMain(App):
    def build(self):
        return WebtoonApp()

if __name__ == '__main__':
    WebtoonAppMain().run()
